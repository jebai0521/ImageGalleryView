// Generated by CoffeeScript 1.6.1

/*
	ImageGalleryView, it will accept an array of 'image' objects,
	composed of 'id,small,large'. Optionally you can also pass a 
	headerView and a pageSize (for paginated galleries)
	
	@params
	@images: array of image objects with the properties "id, small, large"
	@headerView: a view to place on before the actual thumbnails
	@pageSize: specify a value greater than 0 in order to paginate the gallery
	
	Created by @raulriera but heavily inspired by https://github.com/codeboxed/Titanium-Image-Gallery
*/


(function() {
  var ImageGalleryView;

  ImageGalleryView = function(images, headerView, pageSize) {
    var addImagesToQueue, createGalleryWindow, createThumbnail, currentPage, footerView, isAndroid, loadMoreButton, onThumbnailTouched, self;
    if (pageSize == null) {
      pageSize = 0;
    }
    isAndroid = Titanium.Platform.osname === "android";
    self = Ti.UI.createScrollView({
      top: 0,
      bottom: 0,
      right: -1,
      left: -1,
      contentWidth: Titanium.UI.FILL,
      contentHeight: "auto",
      layout: "horizontal",
      showVerticalScrollIndicator: true
    });
    if (pageSize > 0) {
      currentPage = 1;
      footerView = Titanium.UI.createView({
        height: 48
      });
      loadMoreButton = Titanium.UI.createButton({
        title: "Load more",
        height: 44,
        left: 10,
        right: 10,
        top: 10,
        bottom: 10
      });
      footerView.add(loadMoreButton);
    }
    createGalleryWindow = function(currentPhoto) {
      var b, closeButton, i, image, imageWindow, photosView, scrollView, viewsArray;
      if (currentPhoto == null) {
        currentPhoto = 0;
      }
      imageWindow = Titanium.UI.createWindow({
        backgroundColor: '#000',
        tabBarHidden: true,
        navBarHidden: true,
        orientationModes: [Ti.UI.LANDSCAPE_LEFT, Ti.UI.LANDSCAPE_RIGHT, Ti.UI.PORTRAIT]
      });
      closeButton = Titanium.UI.createButton({
        backgroundColor: "#55000000",
        backgroundImage: null,
        borderColor: '#fff',
        borderRadius: 4,
        borderWidth: 1,
        width: '44dp',
        height: '24dp',
        font: {
          fontSize: '11dp'
        },
        color: '#fff',
        title: L("gallery_close"),
        top: '10dp',
        left: '10dp'
      });
      viewsArray = [];
      photosView = Titanium.UI.createScrollableView({
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        showPagingControl: false,
        currentPage: 0
      });
      i = 0;
      b = images.length;
      while (i < b) {
        image = Ti.UI.createImageView({
          backgroundColor: "#000",
          image: images[i].large,
          width: '100%'
        });
        if (!isAndroid) {
          scrollView = Titanium.UI.createScrollView({
            maxZoomScale: 4,
            minZoomScale: 1
          });
          scrollView.add(image);
        }
        viewsArray.push(isAndroid ? image : scrollView);
        i++;
      }
      photosView.views = viewsArray;
      photosView.currentPage = currentPhoto;
      closeButton.addEventListener("click", function(e) {
        return imageWindow.close();
      });
      imageWindow.add(photosView);
      imageWindow.add(closeButton);
      return imageWindow;
    };
    createThumbnail = function(image, index) {
      var view;
      return view = Ti.UI.createImageView({
        image: image.small,
        width: '70dp',
        height: '70dp',
        top: '8dp',
        left: '8dp',
        id: image.id,
        index: index
      });
    };
    onThumbnailTouched = function(e) {
      var window;
      if (e.source.id != null) {
        self.fireEvent("thumbnailTouched", {
          image: e.source
        });
        window = createGalleryWindow(e.source.index);
        return window.open();
      }
    };
    addImagesToQueue = function() {
      var endsAt, image, imagesPaginated, startsAt, _i, _j, _len, _len1, _results;
      if (pageSize === 0 || images.length < pageSize) {
        _results = [];
        for (_i = 0, _len = images.length; _i < _len; _i++) {
          image = images[_i];
          _results.push(self.add(createThumbnail(image)));
        }
        return _results;
      } else {
        if (currentPage > 1) {
          self.remove(loadMoreButton);
        }
        startsAt = (currentPage - 1) * pageSize;
        endsAt = currentPage * pageSize;
        imagesPaginated = images.slice(startsAt, endsAt);
        currentPage = currentPage + 1;
        for (_j = 0, _len1 = imagesPaginated.length; _j < _len1; _j++) {
          image = imagesPaginated[_j];
          self.add(createThumbnail(image));
        }
        if ((currentPage - 1) < Math.ceil(images.length / pageSize)) {
          return self.add(loadMoreButton);
        }
      }
    };
    self.addEventListener("click", onThumbnailTouched);
    loadMoreButton.addEventListener("click", addImagesToQueue);
    if (headerView) {
      self.add(headerView);
    }
    addImagesToQueue();
    return self;
  };

  module.exports = ImageGalleryView;

}).call(this);
